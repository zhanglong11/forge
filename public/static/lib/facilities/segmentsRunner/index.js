import MovingLineSegmentsGroup from"./MovingLineSegmentsGroup";const ONE_SECOND=1e3;function isOutOfRange(e,t,r){return r>0?e>t:e<t}function vec3BeyondPoint(e,t,r){return isOutOfRange(e.x,t.x,r.x)||isOutOfRange(e.y,t.y,r.y)||isOutOfRange(e.z,t.z,r.z)}class Timer{constructor(e,t=e){this.fn=e.bind(t),this.destroyed=!1,this.paused=!1}update(e){this.fn(e)}refresh(e,t=e){this.fn=e.bind(t),this.destroyed=!1,this.paused=!1}pause(){this.paused=!0}resume(){this.paused=!1}destroy(){this.destroyed=!0}}class TimerRunner{constructor(){this.timers=[],this._sleepTimersIndex=[],this._lastTime=Date.now(),this._raf=null,this.running=!1}addTimer(e,t=e){let r;if(this._sleepTimersIndex.length){let s=this._sleepTimersIndex.pop();r=this.timers[s],r.refresh(e,t)}else r=new Timer(e,t),this.timers.push(r);return this.running||this.start(),r}_runTimer(){let e=Date.now(),t=(e-this._lastTime)/1e3,r=!1;this.timers.forEach(e=>{e.destroyed||(r=!0,e.paused||e.update(t))}),this._lastTime=e,this._raf=r?requestAnimationFrame(this._runTimer.bind(this)):null}start(){this._lastTime=Date.now(),this.timers.length&&(this._raf=requestAnimationFrame(this._runTimer.bind(this)))}stop(){this._raf&&cancelAnimationFrame(this._raf)}}class RunningSegmentTask{constructor(e,t,r,s){this.segGroup=e,this.posUpdateFn=t,this.dirUpdateFn=r,this.done=s,this.timer=null,this._currentSegmentIndex=0;let i=e.getSegmentAtIndex(this._currentSegmentIndex);this._currentPos=i.start.clone(),this._targetPos=i.end.clone(),this._currentSpeed=i.getDirectionNormal().clone().multiplyScalar(i.speed),this._currentSeg=i,this._runner=null}_updateCurrentMovingState(){let e=this.segGroup.getSegmentAtIndex(this._currentSegmentIndex);this._targetPos=e.end.clone(),this._currentSpeed=e.getDirectionNormal().clone().multiplyScalar(e.speed),this._currentSeg=e}_update(e){let t=!1;if(this._currentPos.equals(this._targetPos)){if(this._currentSegmentIndex++,this._currentSegmentIndex>this.segGroup.getSegmentsCount()-1)return this.stop(),void this.done();this._updateCurrentMovingState(),t=!0}let r=this._currentPos.clone().add(this._currentSpeed.clone().multiplyScalar(e));vec3BeyondPoint(r,this._targetPos,this._currentSpeed)?this._currentPos=this._targetPos.clone():this._currentPos=r,this.dirUpdateFn&&t&&this.dirUpdateFn(this._currentSpeed.clone().normalize()),this.posUpdateFn(this._currentPos.clone())}run(e){this.timer=e.registerTaskUpdater(this._update,this),this.runner=e}pause(){return!(!this.timer||this.timer.destroyed)&&(this.timer.pause(),!0)}resume(){return!(!this.timer||this.timer.destroyed)&&(this.timer.resume(),!0)}restart(){if(!this._runner)return!1;this.timer&&!this.timer.destroyed&&this.stop(),this._currentSegmentIndex=0;let e=this.segGroup.getSegmentAtIndex(this._currentSegmentIndex);return this._currentPos=e.start.clone(),this._updateCurrentMovingState(),!0}stop(){return!(!this.timer||this.timer.destroyed)&&(this.timer.destroy(),!0)}}export default class SegmentsRunner{constructor(){this._timerRunner=new TimerRunner}runWith(e,t,r,s){let i=new MovingLineSegmentsGroup;e.forEach(e=>{i.addSegment(e.start,e.end,e.speed)});let n=new RunningSegmentTask(i,t,r,s);return n.run(this),n}registerTaskUpdater(e,t=e){return this._timerRunner.addTimer(e,t)}}export{MovingLineSegmentsGroup};